updated 2016-03-30 by FreyP 

nginx docker container for AT proxy

design goals:
+ use official nginx container
+ extended to have a parametrized nginx configuration
+ fitted for AT proxy 
+ use environment variables to customize the nginx configuration at container startup time 
+ load SSL certificates from docker host 
  (for security reasons, do not want to have them in the image / dockerhub repo)

ideas adapted from
+ https://blog.docker.com/2015/04/tips-for-deploying-nginx-official-image-with-docker/
+ http://blog.tryolabs.com/2015/03/26/configurable-docker-containers-for-multiple-environments/

repositories:
https://github.com/freyp577/atproxy-nginx
https://hub.docker.com/r/freyp577/atproxy-nginx/

TODO move to Haufe Bitbucket repo (or HRS github.io)

usage: 
see also README.md

docker build -t freyp577/atproxy-nginx:latest . 

docker push freyp577/atproxy-nginx

docker run --rm --env-file ./test.env freyp577/atproxy-nginx more /etc/nginx/conf.d/staging.conf
...  cat /usr/share/nginx/html/bluegreen.json

for testing, use self-signed certificates
instructins for creation adapted from 
http://stackoverflow.com/questions/10175812/how-to-create-a-self-signed-certificate-with-openssl

pushd ssl
openssl req -x509 -newkey rsa:2048 -keyout autorentool.haufe.de.key -out autorentool.haufe.de.crt -days 1  -nodes  -subj '/CN=localhost'
openssl req -x509 -newkey rsa:2048 -keyout at-acceptance.haufe-ep.de_151027.key -out at-acceptance.haufe-ep.de_151027.crt -days 1  -nodes  -subj '/CN=localhost'


TODO mechanism to securely provision SSL certificates

see also

https://hub.docker.com/r/freemountain/nginx-ssl-proxy/

docker run \
  -e ENABLE_SSL=true \
  --link <container_id>:target \
  --volumes-from ssl-data \
  freemountain/nginx-ssl-proxy
 


on vl-at-proxy:

docker run --rm --env-file /opt/atproxy/bin/green.env freyp577/atproxy-nginx ...
... more /etc/nginx/conf.d/staging.conf
... more /etc/nginx/conf.d/production.conf
... more /usr/share/nginx/html/bluegreen.json

docker run --rm --env-file /opt/atproxy/bin/green.env -v /opt/atproxy/ssl/:/etc/nginx/ssl/:ro freyp577/atproxy-nginx  ls /etc/nginx/ssl

docker run --rm --env-file /opt/atproxy/bin/green.env -v /opt/atproxy/ssl/:/etc/nginx/ssl/:ro freyp577/atproxy-nginx 

ATTN require SNI extension to support two SSL sites for a single IP
see http://nginx.org/en/docs/http/configuring_https_servers.html#name_based_https_servers
SSL protocol behaviour. The SSL connection is established before the browser sends an HTTP request and nginx does not know the name of the requested server.
... assign a separate IP address for every HTTPS server

A more generic solution for running several HTTPS servers on a single IP address is TLS Server Name Indication extension 
(SNI, RFC 6066), which allows a browser to pass a requested server name during the SSL handshake and, therefore, 
the server will know which certificate it should use for the connection. However, SNI has limited browser support. Currently it is supported starting with the following browsers versions:

option “--enable-tlsext”
note: "TLS SNI support enabled" with both stable and latest


to start nginx_proxy with blue env (blue=active, green=inactive):
docker run --env-file /opt/atproxy/bin/$color.env --name=nginx_proxy -d -p 443:443 -v /opt/atproxy/ssl/:/etc/nginx/ssl/:ro freyp577/atproxy-nginx  


to inspect status of running container:

docker exec -it nginx_docker cat /usr/share/nginx/html/bluegreen.json


update container on  vl-at-proxy:

bash ./provision.sh --limit=proxy --extra-vars "build_proxy=True"


test configuration 

https://172.26.0.8:443/ -> default is production
https://172.26.0.8:443/status/bluegreen.json 
